{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP9GDi8QEL6eyBUkod/x23O"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#Import Required Libraries\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n"],"metadata":{"id":"Jh6H9jTervse","executionInfo":{"status":"ok","timestamp":1753197029836,"user_tz":-330,"elapsed":410,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Step 2: Load Dataset\n","data = pd.read_csv(\"/emplyoee salaray prediction.zip\")\n"],"metadata":{"id":"tEGt8EKZr7Ja","executionInfo":{"status":"ok","timestamp":1753197092101,"user_tz":-330,"elapsed":6,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["print(data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PuTHN5UgsKuu","executionInfo":{"status":"ok","timestamp":1753197110528,"user_tz":-330,"elapsed":615,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"9742aaf5-6165-4f1c-e4e6-40dbcb401b91"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["(32561, 15)\n"]}]},{"cell_type":"code","source":["print(data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qa6SniHksO9A","executionInfo":{"status":"ok","timestamp":1753197127937,"user_tz":-330,"elapsed":616,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"9c86ef31-5557-4b9d-912b-d031a80e65cf"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["   age workclass  fnlwgt     education  education.num marital.status  \\\n","0   90         ?   77053       HS-grad              9        Widowed   \n","1   82   Private  132870       HS-grad              9        Widowed   \n","2   66         ?  186061  Some-college             10        Widowed   \n","3   54   Private  140359       7th-8th              4       Divorced   \n","4   41   Private  264663  Some-college             10      Separated   \n","\n","          occupation   relationship   race     sex  capital.gain  \\\n","0                  ?  Not-in-family  White  Female             0   \n","1    Exec-managerial  Not-in-family  White  Female             0   \n","2                  ?      Unmarried  Black  Female             0   \n","3  Machine-op-inspct      Unmarried  White  Female             0   \n","4     Prof-specialty      Own-child  White  Female             0   \n","\n","   capital.loss  hours.per.week native.country income  \n","0          4356              40  United-States  <=50K  \n","1          4356              18  United-States  <=50K  \n","2          4356              40  United-States  <=50K  \n","3          3900              40  United-States  <=50K  \n","4          3900              40  United-States  <=50K  \n"]}]},{"cell_type":"code","source":["print(data.info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2n8kbYJjsTvF","executionInfo":{"status":"ok","timestamp":1753197150173,"user_tz":-330,"elapsed":528,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"a2823014-a92c-432a-93a3-ef710d722889"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 32561 entries, 0 to 32560\n","Data columns (total 15 columns):\n"," #   Column          Non-Null Count  Dtype \n","---  ------          --------------  ----- \n"," 0   age             32561 non-null  int64 \n"," 1   workclass       32561 non-null  object\n"," 2   fnlwgt          32561 non-null  int64 \n"," 3   education       32561 non-null  object\n"," 4   education.num   32561 non-null  int64 \n"," 5   marital.status  32561 non-null  object\n"," 6   occupation      32561 non-null  object\n"," 7   relationship    32561 non-null  object\n"," 8   race            32561 non-null  object\n"," 9   sex             32561 non-null  object\n"," 10  capital.gain    32561 non-null  int64 \n"," 11  capital.loss    32561 non-null  int64 \n"," 12  hours.per.week  32561 non-null  int64 \n"," 13  native.country  32561 non-null  object\n"," 14  income          32561 non-null  object\n","dtypes: int64(6), object(9)\n","memory usage: 3.7+ MB\n","None\n"]}]},{"cell_type":"code","source":["#Handle Missing Values\n","#Replace '?' with NaN, then drop rows with NaN\n","data.replace('?', np.nan, inplace=True)\n","data.dropna(inplace=True)"],"metadata":{"id":"ToAM6DtXsaSE","executionInfo":{"status":"ok","timestamp":1753197233100,"user_tz":-330,"elapsed":410,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["print(data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9CKGxJCKstCu","executionInfo":{"status":"ok","timestamp":1753197270270,"user_tz":-330,"elapsed":412,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"02904976-189e-4b9d-ea6f-fbb571edaf76"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["   age workclass  fnlwgt     education  education.num marital.status  \\\n","1   82   Private  132870       HS-grad              9        Widowed   \n","3   54   Private  140359       7th-8th              4       Divorced   \n","4   41   Private  264663  Some-college             10      Separated   \n","5   34   Private  216864       HS-grad              9       Divorced   \n","6   38   Private  150601          10th              6      Separated   \n","\n","          occupation   relationship   race     sex  capital.gain  \\\n","1    Exec-managerial  Not-in-family  White  Female             0   \n","3  Machine-op-inspct      Unmarried  White  Female             0   \n","4     Prof-specialty      Own-child  White  Female             0   \n","5      Other-service      Unmarried  White  Female             0   \n","6       Adm-clerical      Unmarried  White    Male             0   \n","\n","   capital.loss  hours.per.week native.country income  \n","1          4356              18  United-States  <=50K  \n","3          3900              40  United-States  <=50K  \n","4          3900              40  United-States  <=50K  \n","5          3770              45  United-States  <=50K  \n","6          3770              40  United-States  <=50K  \n"]}]},{"cell_type":"code","source":["#Label Encoding for Categorical Columns\n","label_encoders = {}\n","for column in data.select_dtypes(include='object').columns:\n","    le = LabelEncoder()\n","    data[column] = le.fit_transform(data[column])\n","    label_encoders[column] = le"],"metadata":{"id":"AcdlaWyYs6N-","executionInfo":{"status":"ok","timestamp":1753197326902,"user_tz":-330,"elapsed":518,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"dyRK3xo8tE71","executionInfo":{"status":"ok","timestamp":1753197375437,"user_tz":-330,"elapsed":456,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"4548543c-833a-44d2-bbaa-f05733115881"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age  workclass  fnlwgt  education  education.num  marital.status  \\\n","1   82          2  132870         11              9               6   \n","3   54          2  140359          5              4               0   \n","4   41          2  264663         15             10               5   \n","5   34          2  216864         11              9               0   \n","6   38          2  150601          0              6               5   \n","\n","   occupation  relationship  race  sex  capital.gain  capital.loss  \\\n","1           3             1     4    0             0          4356   \n","3           6             4     4    0             0          3900   \n","4           9             3     4    0             0          3900   \n","5           7             4     4    0             0          3770   \n","6           0             4     4    1             0          3770   \n","\n","   hours.per.week  native.country  income  \n","1              18              38       0  \n","3              40              38       0  \n","4              40              38       0  \n","5              45              38       0  \n","6              40              38       0  "],"text/html":["\n","  <div id=\"df-be46c687-743b-41f2-9d85-0b170de1fc0b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>workclass</th>\n","      <th>fnlwgt</th>\n","      <th>education</th>\n","      <th>education.num</th>\n","      <th>marital.status</th>\n","      <th>occupation</th>\n","      <th>relationship</th>\n","      <th>race</th>\n","      <th>sex</th>\n","      <th>capital.gain</th>\n","      <th>capital.loss</th>\n","      <th>hours.per.week</th>\n","      <th>native.country</th>\n","      <th>income</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>82</td>\n","      <td>2</td>\n","      <td>132870</td>\n","      <td>11</td>\n","      <td>9</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4356</td>\n","      <td>18</td>\n","      <td>38</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>54</td>\n","      <td>2</td>\n","      <td>140359</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3900</td>\n","      <td>40</td>\n","      <td>38</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>41</td>\n","      <td>2</td>\n","      <td>264663</td>\n","      <td>15</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>9</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3900</td>\n","      <td>40</td>\n","      <td>38</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>34</td>\n","      <td>2</td>\n","      <td>216864</td>\n","      <td>11</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3770</td>\n","      <td>45</td>\n","      <td>38</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>38</td>\n","      <td>2</td>\n","      <td>150601</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3770</td>\n","      <td>40</td>\n","      <td>38</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be46c687-743b-41f2-9d85-0b170de1fc0b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-be46c687-743b-41f2-9d85-0b170de1fc0b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-be46c687-743b-41f2-9d85-0b170de1fc0b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-736de598-0808-486e-980a-0286dbc45390\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-736de598-0808-486e-980a-0286dbc45390')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-736de598-0808-486e-980a-0286dbc45390 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 30162,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 17,\n        \"max\": 90,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          38,\n          22,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2,\n          5,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fnlwgt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105652,\n        \"min\": 13769,\n        \"max\": 1484705,\n        \"num_unique_values\": 20263,\n        \"samples\": [\n          166124,\n          268639,\n          216931\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 15,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          11,\n          5,\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education.num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 16,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          9,\n          4,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"marital.status\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6,\n          0,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 13,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          12,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"relationship\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          4,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"capital.gain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7406,\n        \"min\": 0,\n        \"max\": 99999,\n        \"num_unique_values\": 118,\n        \"samples\": [\n          3887,\n          2329\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"capital.loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 404,\n        \"min\": 0,\n        \"max\": 4356,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          1974,\n          2246\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hours.per.week\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          46,\n          99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"native.country\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 40,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          28,\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# Feature Selection\n","X = data.drop('income', axis=1)  # input variables\n","y = data['income']               # target/output"],"metadata":{"id":"PaghLTaBtQer","executionInfo":{"status":"ok","timestamp":1753197415078,"user_tz":-330,"elapsed":632,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["print(\"Shape of X:\", X.shape)\n","print(\"Shape of y:\", y.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zVxO2c2XtZXX","executionInfo":{"status":"ok","timestamp":1753197455205,"user_tz":-330,"elapsed":453,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"e1e85eb7-cfcd-40cb-d49e-4dcaaa518f9d"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of X: (30162, 14)\n","Shape of y: (30162,)\n"]}]},{"cell_type":"code","source":["#  Feature Scaling\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)"],"metadata":{"id":"nvdvvxBbttBh","executionInfo":{"status":"ok","timestamp":1753197516400,"user_tz":-330,"elapsed":398,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["print(X_scaled[:5])  # Shows first 5 rows after scaling"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sPlUpSejt5ZJ","executionInfo":{"status":"ok","timestamp":1753197553211,"user_tz":-330,"elapsed":423,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"b1dd7c45-fc38-4727-8c4e-27c54d7e076e"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 3.31662977e+00 -2.08954638e-01 -5.38790124e-01  1.74762773e-01\n","  -4.39738199e-01  2.28296868e+00 -7.34545341e-01 -2.61248926e-01\n","   3.85047902e-01 -1.44340518e+00 -1.47444622e-01  1.05558137e+01\n","  -1.91416096e+00  2.64923943e-01]\n"," [ 1.18483085e+00 -2.08954638e-01 -4.67905945e-01 -1.39911971e+00\n","  -2.40055892e+00 -1.72239640e+00  9.96398104e-03  1.61221520e+00\n","   3.85047902e-01 -1.44340518e+00 -1.47444622e-01  9.42791507e+00\n","  -7.77341106e-02  2.64923943e-01]\n"," [ 1.95067063e-01 -2.08954638e-01  7.08644595e-01  1.22401776e+00\n","  -4.75740537e-02  1.61540783e+00  7.54473303e-01  9.87727158e-01\n","   3.85047902e-01 -1.44340518e+00 -1.47444622e-01  9.42791507e+00\n","  -7.77341106e-02  2.64923943e-01]\n"," [-3.37882667e-01 -2.08954638e-01  2.56221992e-01  1.74762773e-01\n","  -4.39738199e-01 -1.72239640e+00  2.58133755e-01  1.61221520e+00\n","   3.85047902e-01 -1.44340518e+00 -1.47444622e-01  9.10636503e+00\n","   3.39635628e-01  2.64923943e-01]\n"," [-3.33399643e-02 -2.08954638e-01 -3.70964329e-01 -2.71068845e+00\n","  -1.61623063e+00  1.61540783e+00 -1.47905466e+00  1.61221520e+00\n","   3.85047902e-01  6.92806158e-01 -1.47444622e-01  9.10636503e+00\n","  -7.77341106e-02  2.64923943e-01]]\n"]}]},{"cell_type":"code","source":["\n","# Split the dataset into 80% training and 20% testing\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X_scaled, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"hGuLPC2DuCpm","executionInfo":{"status":"ok","timestamp":1753197708515,"user_tz":-330,"elapsed":404,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["print(X_train.shape, X_test.shape)\n","print(y_train.shape, y_test.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V-Jg9y3AuNhc","executionInfo":{"status":"ok","timestamp":1753197710790,"user_tz":-330,"elapsed":5,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"90bf3a77-2d35-4de8-8322-aa4909f66699"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["(24129, 14) (6033, 14)\n","(24129,) (6033,)\n"]}]},{"cell_type":"code","source":["# Train Random Forest Classifier\n","model = RandomForestClassifier(random_state=42)\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"l6yKij0Yuir_","executionInfo":{"status":"ok","timestamp":1753197750970,"user_tz":-330,"elapsed":2846,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"d1428b47-1f93-4e0f-94b4-f8ebbec458f3"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["#  Predictions and Evaluation\n","y_pred = model.predict(X_test)\n","print(\"Accuracy Score:\", accuracy_score(y_test, y_pred))\n","print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n","print(\"Classification Report:\\n\", classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VlII0DiZu1_c","executionInfo":{"status":"ok","timestamp":1753197831132,"user_tz":-330,"elapsed":663,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"e5223f95-3f64-4825-eb78-6966dc361893"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy Score: 0.8491629371788496\n","Confusion Matrix:\n"," [[4188  345]\n"," [ 565  935]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.88      0.92      0.90      4533\n","           1       0.73      0.62      0.67      1500\n","\n","    accuracy                           0.85      6033\n","   macro avg       0.81      0.77      0.79      6033\n","weighted avg       0.84      0.85      0.84      6033\n","\n"]}]},{"cell_type":"code","source":["print(X_train.shape, X_test.shape)\n","print(y_train.shape, y_test.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iiVXcvEWvBAo","executionInfo":{"status":"ok","timestamp":1753197847164,"user_tz":-330,"elapsed":3,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"3cf66f0e-3a93-4a59-f07d-2d5c94627ea0"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["(24129, 14) (6033, 14)\n","(24129,) (6033,)\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","# Create the confusion matrix\n","cm = confusion_matrix(y_test, y_pred)\n","\n","# Plot it as a heatmap\n","plt.figure(figsize=(6, 4))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['<=50K', '>50K'], yticklabels=['<=50K', '>50K'])\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.title('Confusion Matrix Heatmap')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"JV_NLgwdvUTu","executionInfo":{"status":"ok","timestamp":1753197927051,"user_tz":-330,"elapsed":1403,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"d3623e20-1874-4763-82db-0103da409852"},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Plot feature importances\n","importances = model.feature_importances_\n","feature_names = X.columns  # assuming you didn't use scaled version here for naming\n","indices = np.argsort(importances)[::-1]\n","\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x=importances[indices], y=[feature_names[i] for i in indices], palette='viridis')\n","plt.title(\"Feature Importances (Random Forest)\")\n","plt.xlabel(\"Importance\")\n","plt.ylabel(\"Feature\")\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":698},"id":"A7xeGDLkvW5P","executionInfo":{"status":"ok","timestamp":1753197943474,"user_tz":-330,"elapsed":1048,"user":{"displayName":"Shravani Desai","userId":"08334832761975631583"}},"outputId":"4e6ec3df-0cf2-42f0-84cf-dfbc42a950df"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-25-916275236.py:7: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x=importances[indices], y=[feature_names[i] for i in indices], palette='viridis')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}